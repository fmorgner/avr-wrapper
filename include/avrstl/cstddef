#ifndef AVRXX_STL_CSTDDEF
#define AVRXX_STL_CSTDDEF

#include <stddef.h>

namespace std {

using ptrdiff_t = ::ptrdiff_t;
using size_t = ::size_t;
using max_align_t = ::max_align_t;
using nullptr_t = decltype(nullptr);

enum class byte : unsigned char {};

template <class IntegerType>
constexpr byte &operator<<=(byte &b, IntegerType shift) noexcept {
  b = static_cast<byte>(static_cast<unsigned char>(b) << shift);
  return b;
}

template <class IntegerType>
constexpr byte operator<<(byte b, IntegerType shift) noexcept {
  return static_cast<byte>(static_cast<unsigned char>(b) << shift);
}

template <class IntegerType>
constexpr byte &operator>>=(byte &b, IntegerType shift) noexcept {
  b = static_cast<byte>(static_cast<unsigned char>(b) >> shift);
  return b;
}

template <class IntegerType>
constexpr byte operator>>(byte b, IntegerType shift) noexcept {
  return static_cast<byte>(static_cast<unsigned char>(b) >> shift);
}

constexpr byte& operator|=(byte& l, byte r) noexcept {
  l = static_cast<byte>(static_cast<unsigned char>(l) | static_cast<unsigned char>(r));
  return l;
}

constexpr byte operator|(byte l, byte r) noexcept {
  return static_cast<byte>(static_cast<unsigned char>(l) | static_cast<unsigned char>(r));
}

constexpr byte& operator&=(byte& l, byte r) noexcept {
  l = static_cast<byte>(static_cast<unsigned char>(l) & static_cast<unsigned char>(r));
  return l;
}

constexpr byte operator&(byte l, byte r) noexcept {
  return static_cast<byte>(static_cast<unsigned char>(l) & static_cast<unsigned char>(r));
}

constexpr byte& operator^=(byte& l, byte r) noexcept{
  l = static_cast<byte>(static_cast<unsigned char>(l) ^ static_cast<unsigned char>(r));
  return l;
}

constexpr byte operator^(byte l, byte r) noexcept {
  return static_cast<byte>(static_cast<unsigned char>(l) ^ static_cast<unsigned char>(r));
}

constexpr byte operator~(byte b) noexcept {
  return static_cast<byte>(~static_cast<unsigned char>(b));
}

template <class IntegerType>
constexpr IntegerType to_integer(byte b) noexcept {
  return static_cast<IntegerType>(b);
}

} // namespace std

#endif